#
# Autogenerated by Thrift Compiler (0.9.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException
import Exprs.ttypes
import Types.ttypes
import Descriptors.ttypes
import Partitions.ttypes


from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None


class TDataSinkType:
  DATA_STREAM_SINK = 0
  TABLE_SINK = 1

  _VALUES_TO_NAMES = {
    0: "DATA_STREAM_SINK",
    1: "TABLE_SINK",
  }

  _NAMES_TO_VALUES = {
    "DATA_STREAM_SINK": 0,
    "TABLE_SINK": 1,
  }

class TTableSinkType:
  HDFS = 0
  HBASE = 1

  _VALUES_TO_NAMES = {
    0: "HDFS",
    1: "HBASE",
  }

  _NAMES_TO_VALUES = {
    "HDFS": 0,
    "HBASE": 1,
  }


class TDataStreamSink:
  """
  Attributes:
   - dest_node_id
   - output_partition
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'dest_node_id', None, None, ), # 1
    (2, TType.STRUCT, 'output_partition', (Partitions.ttypes.TDataPartition, Partitions.ttypes.TDataPartition.thrift_spec), None, ), # 2
  )

  def __init__(self, dest_node_id=None, output_partition=None,):
    self.dest_node_id = dest_node_id
    self.output_partition = output_partition

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.dest_node_id = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.output_partition = Partitions.ttypes.TDataPartition()
          self.output_partition.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('TDataStreamSink')
    if self.dest_node_id is not None:
      oprot.writeFieldBegin('dest_node_id', TType.I32, 1)
      oprot.writeI32(self.dest_node_id)
      oprot.writeFieldEnd()
    if self.output_partition is not None:
      oprot.writeFieldBegin('output_partition', TType.STRUCT, 2)
      self.output_partition.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.dest_node_id is None:
      raise TProtocol.TProtocolException(message='Required field dest_node_id is unset!')
    if self.output_partition is None:
      raise TProtocol.TProtocolException(message='Required field output_partition is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class THdfsTableSink:
  """
  Attributes:
   - partition_key_exprs
   - overwrite
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'partition_key_exprs', (TType.STRUCT,(Exprs.ttypes.TExpr, Exprs.ttypes.TExpr.thrift_spec)), None, ), # 1
    (2, TType.BOOL, 'overwrite', None, None, ), # 2
  )

  def __init__(self, partition_key_exprs=None, overwrite=None,):
    self.partition_key_exprs = partition_key_exprs
    self.overwrite = overwrite

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.partition_key_exprs = []
          (_etype3, _size0) = iprot.readListBegin()
          for _i4 in xrange(_size0):
            _elem5 = Exprs.ttypes.TExpr()
            _elem5.read(iprot)
            self.partition_key_exprs.append(_elem5)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.BOOL:
          self.overwrite = iprot.readBool();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('THdfsTableSink')
    if self.partition_key_exprs is not None:
      oprot.writeFieldBegin('partition_key_exprs', TType.LIST, 1)
      oprot.writeListBegin(TType.STRUCT, len(self.partition_key_exprs))
      for iter6 in self.partition_key_exprs:
        iter6.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.overwrite is not None:
      oprot.writeFieldBegin('overwrite', TType.BOOL, 2)
      oprot.writeBool(self.overwrite)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.partition_key_exprs is None:
      raise TProtocol.TProtocolException(message='Required field partition_key_exprs is unset!')
    if self.overwrite is None:
      raise TProtocol.TProtocolException(message='Required field overwrite is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class TTableSink:
  """
  Attributes:
   - target_table_id
   - type
   - hdfs_table_sink
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'target_table_id', None, None, ), # 1
    (2, TType.I32, 'type', None, None, ), # 2
    (3, TType.STRUCT, 'hdfs_table_sink', (THdfsTableSink, THdfsTableSink.thrift_spec), None, ), # 3
  )

  def __init__(self, target_table_id=None, type=None, hdfs_table_sink=None,):
    self.target_table_id = target_table_id
    self.type = type
    self.hdfs_table_sink = hdfs_table_sink

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.target_table_id = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.type = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.hdfs_table_sink = THdfsTableSink()
          self.hdfs_table_sink.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('TTableSink')
    if self.target_table_id is not None:
      oprot.writeFieldBegin('target_table_id', TType.I32, 1)
      oprot.writeI32(self.target_table_id)
      oprot.writeFieldEnd()
    if self.type is not None:
      oprot.writeFieldBegin('type', TType.I32, 2)
      oprot.writeI32(self.type)
      oprot.writeFieldEnd()
    if self.hdfs_table_sink is not None:
      oprot.writeFieldBegin('hdfs_table_sink', TType.STRUCT, 3)
      self.hdfs_table_sink.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.target_table_id is None:
      raise TProtocol.TProtocolException(message='Required field target_table_id is unset!')
    if self.type is None:
      raise TProtocol.TProtocolException(message='Required field type is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class TDataSink:
  """
  Attributes:
   - type
   - stream_sink
   - table_sink
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'type', None, None, ), # 1
    (2, TType.STRUCT, 'stream_sink', (TDataStreamSink, TDataStreamSink.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'table_sink', (TTableSink, TTableSink.thrift_spec), None, ), # 3
  )

  def __init__(self, type=None, stream_sink=None, table_sink=None,):
    self.type = type
    self.stream_sink = stream_sink
    self.table_sink = table_sink

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.type = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.stream_sink = TDataStreamSink()
          self.stream_sink.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.table_sink = TTableSink()
          self.table_sink.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('TDataSink')
    if self.type is not None:
      oprot.writeFieldBegin('type', TType.I32, 1)
      oprot.writeI32(self.type)
      oprot.writeFieldEnd()
    if self.stream_sink is not None:
      oprot.writeFieldBegin('stream_sink', TType.STRUCT, 2)
      self.stream_sink.write(oprot)
      oprot.writeFieldEnd()
    if self.table_sink is not None:
      oprot.writeFieldBegin('table_sink', TType.STRUCT, 3)
      self.table_sink.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.type is None:
      raise TProtocol.TProtocolException(message='Required field type is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
