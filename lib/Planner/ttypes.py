#
# Autogenerated by Thrift Compiler (0.9.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException
import Types.ttypes
import Exprs.ttypes
import DataSinks.ttypes
import PlanNodes.ttypes
import Partitions.ttypes


from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None



class TPlanFragment:
  """
  Attributes:
   - plan
   - output_exprs
   - output_sink
   - partition
  """

  thrift_spec = (
    None, # 0
    None, # 1
    (2, TType.STRUCT, 'plan', (PlanNodes.ttypes.TPlan, PlanNodes.ttypes.TPlan.thrift_spec), None, ), # 2
    None, # 3
    (4, TType.LIST, 'output_exprs', (TType.STRUCT,(Exprs.ttypes.TExpr, Exprs.ttypes.TExpr.thrift_spec)), None, ), # 4
    (5, TType.STRUCT, 'output_sink', (DataSinks.ttypes.TDataSink, DataSinks.ttypes.TDataSink.thrift_spec), None, ), # 5
    (6, TType.STRUCT, 'partition', (Partitions.ttypes.TDataPartition, Partitions.ttypes.TDataPartition.thrift_spec), None, ), # 6
  )

  def __init__(self, plan=None, output_exprs=None, output_sink=None, partition=None,):
    self.plan = plan
    self.output_exprs = output_exprs
    self.output_sink = output_sink
    self.partition = partition

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 2:
        if ftype == TType.STRUCT:
          self.plan = PlanNodes.ttypes.TPlan()
          self.plan.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.LIST:
          self.output_exprs = []
          (_etype3, _size0) = iprot.readListBegin()
          for _i4 in xrange(_size0):
            _elem5 = Exprs.ttypes.TExpr()
            _elem5.read(iprot)
            self.output_exprs.append(_elem5)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRUCT:
          self.output_sink = DataSinks.ttypes.TDataSink()
          self.output_sink.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRUCT:
          self.partition = Partitions.ttypes.TDataPartition()
          self.partition.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('TPlanFragment')
    if self.plan is not None:
      oprot.writeFieldBegin('plan', TType.STRUCT, 2)
      self.plan.write(oprot)
      oprot.writeFieldEnd()
    if self.output_exprs is not None:
      oprot.writeFieldBegin('output_exprs', TType.LIST, 4)
      oprot.writeListBegin(TType.STRUCT, len(self.output_exprs))
      for iter6 in self.output_exprs:
        iter6.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.output_sink is not None:
      oprot.writeFieldBegin('output_sink', TType.STRUCT, 5)
      self.output_sink.write(oprot)
      oprot.writeFieldEnd()
    if self.partition is not None:
      oprot.writeFieldBegin('partition', TType.STRUCT, 6)
      self.partition.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.partition is None:
      raise TProtocol.TProtocolException(message='Required field partition is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class TScanRangeLocation:
  """
  Attributes:
   - server
   - volume_id
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'server', (Types.ttypes.TNetworkAddress, Types.ttypes.TNetworkAddress.thrift_spec), None, ), # 1
    (2, TType.I32, 'volume_id', None, -1, ), # 2
  )

  def __init__(self, server=None, volume_id=thrift_spec[2][4],):
    self.server = server
    self.volume_id = volume_id

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.server = Types.ttypes.TNetworkAddress()
          self.server.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.volume_id = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('TScanRangeLocation')
    if self.server is not None:
      oprot.writeFieldBegin('server', TType.STRUCT, 1)
      self.server.write(oprot)
      oprot.writeFieldEnd()
    if self.volume_id is not None:
      oprot.writeFieldBegin('volume_id', TType.I32, 2)
      oprot.writeI32(self.volume_id)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.server is None:
      raise TProtocol.TProtocolException(message='Required field server is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class TScanRangeLocations:
  """
  Attributes:
   - scan_range
   - locations
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'scan_range', (PlanNodes.ttypes.TScanRange, PlanNodes.ttypes.TScanRange.thrift_spec), None, ), # 1
    (2, TType.LIST, 'locations', (TType.STRUCT,(TScanRangeLocation, TScanRangeLocation.thrift_spec)), None, ), # 2
  )

  def __init__(self, scan_range=None, locations=None,):
    self.scan_range = scan_range
    self.locations = locations

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.scan_range = PlanNodes.ttypes.TScanRange()
          self.scan_range.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.locations = []
          (_etype10, _size7) = iprot.readListBegin()
          for _i11 in xrange(_size7):
            _elem12 = TScanRangeLocation()
            _elem12.read(iprot)
            self.locations.append(_elem12)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('TScanRangeLocations')
    if self.scan_range is not None:
      oprot.writeFieldBegin('scan_range', TType.STRUCT, 1)
      self.scan_range.write(oprot)
      oprot.writeFieldEnd()
    if self.locations is not None:
      oprot.writeFieldBegin('locations', TType.LIST, 2)
      oprot.writeListBegin(TType.STRUCT, len(self.locations))
      for iter13 in self.locations:
        iter13.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.scan_range is None:
      raise TProtocol.TProtocolException(message='Required field scan_range is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
