#
# Autogenerated by Thrift Compiler (0.9.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException
import Status.ttypes
import beeswaxd.ttypes
import cli_service.ttypes


from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None


class TImpalaQueryOptions:
  ABORT_ON_ERROR = 0
  MAX_ERRORS = 1
  DISABLE_CODEGEN = 2
  BATCH_SIZE = 3
  MEM_LIMIT = 4
  NUM_NODES = 5
  MAX_SCAN_RANGE_LENGTH = 6
  MAX_IO_BUFFERS = 7
  NUM_SCANNER_THREADS = 8
  ALLOW_UNSUPPORTED_FORMATS = 9
  DEFAULT_ORDER_BY_LIMIT = 10
  DEBUG_ACTION = 11
  ABORT_ON_DEFAULT_LIMIT_EXCEEDED = 12

  _VALUES_TO_NAMES = {
    0: "ABORT_ON_ERROR",
    1: "MAX_ERRORS",
    2: "DISABLE_CODEGEN",
    3: "BATCH_SIZE",
    4: "MEM_LIMIT",
    5: "NUM_NODES",
    6: "MAX_SCAN_RANGE_LENGTH",
    7: "MAX_IO_BUFFERS",
    8: "NUM_SCANNER_THREADS",
    9: "ALLOW_UNSUPPORTED_FORMATS",
    10: "DEFAULT_ORDER_BY_LIMIT",
    11: "DEBUG_ACTION",
    12: "ABORT_ON_DEFAULT_LIMIT_EXCEEDED",
  }

  _NAMES_TO_VALUES = {
    "ABORT_ON_ERROR": 0,
    "MAX_ERRORS": 1,
    "DISABLE_CODEGEN": 2,
    "BATCH_SIZE": 3,
    "MEM_LIMIT": 4,
    "NUM_NODES": 5,
    "MAX_SCAN_RANGE_LENGTH": 6,
    "MAX_IO_BUFFERS": 7,
    "NUM_SCANNER_THREADS": 8,
    "ALLOW_UNSUPPORTED_FORMATS": 9,
    "DEFAULT_ORDER_BY_LIMIT": 10,
    "DEBUG_ACTION": 11,
    "ABORT_ON_DEFAULT_LIMIT_EXCEEDED": 12,
  }


class TInsertResult:
  """
  Attributes:
   - rows_appended
  """

  thrift_spec = (
    None, # 0
    (1, TType.MAP, 'rows_appended', (TType.STRING,None,TType.I64,None), None, ), # 1
  )

  def __init__(self, rows_appended=None,):
    self.rows_appended = rows_appended

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.MAP:
          self.rows_appended = {}
          (_ktype1, _vtype2, _size0 ) = iprot.readMapBegin() 
          for _i4 in xrange(_size0):
            _key5 = iprot.readString();
            _val6 = iprot.readI64();
            self.rows_appended[_key5] = _val6
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('TInsertResult')
    if self.rows_appended is not None:
      oprot.writeFieldBegin('rows_appended', TType.MAP, 1)
      oprot.writeMapBegin(TType.STRING, TType.I64, len(self.rows_appended))
      for kiter7,viter8 in self.rows_appended.items():
        oprot.writeString(kiter7)
        oprot.writeI64(viter8)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.rows_appended is None:
      raise TProtocol.TProtocolException(message='Required field rows_appended is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
