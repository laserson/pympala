#
# Autogenerated by Thrift Compiler (0.9.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException
import Types.ttypes
import Opcodes.ttypes


from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None


class TExprNodeType:
  AGG_EXPR = 0
  ARITHMETIC_EXPR = 1
  BINARY_PRED = 2
  BOOL_LITERAL = 3
  CASE_EXPR = 4
  CAST_EXPR = 5
  COMPOUND_PRED = 6
  DATE_LITERAL = 7
  FLOAT_LITERAL = 8
  FUNCTION_CALL = 9
  INT_LITERAL = 10
  IN_PRED = 11
  IS_NULL_PRED = 12
  LIKE_PRED = 13
  LITERAL_PRED = 14
  NULL_LITERAL = 15
  SLOT_REF = 16
  STRING_LITERAL = 17

  _VALUES_TO_NAMES = {
    0: "AGG_EXPR",
    1: "ARITHMETIC_EXPR",
    2: "BINARY_PRED",
    3: "BOOL_LITERAL",
    4: "CASE_EXPR",
    5: "CAST_EXPR",
    6: "COMPOUND_PRED",
    7: "DATE_LITERAL",
    8: "FLOAT_LITERAL",
    9: "FUNCTION_CALL",
    10: "INT_LITERAL",
    11: "IN_PRED",
    12: "IS_NULL_PRED",
    13: "LIKE_PRED",
    14: "LITERAL_PRED",
    15: "NULL_LITERAL",
    16: "SLOT_REF",
    17: "STRING_LITERAL",
  }

  _NAMES_TO_VALUES = {
    "AGG_EXPR": 0,
    "ARITHMETIC_EXPR": 1,
    "BINARY_PRED": 2,
    "BOOL_LITERAL": 3,
    "CASE_EXPR": 4,
    "CAST_EXPR": 5,
    "COMPOUND_PRED": 6,
    "DATE_LITERAL": 7,
    "FLOAT_LITERAL": 8,
    "FUNCTION_CALL": 9,
    "INT_LITERAL": 10,
    "IN_PRED": 11,
    "IS_NULL_PRED": 12,
    "LIKE_PRED": 13,
    "LITERAL_PRED": 14,
    "NULL_LITERAL": 15,
    "SLOT_REF": 16,
    "STRING_LITERAL": 17,
  }

class TAggregationOp:
  INVALID = 0
  COUNT = 1
  MAX = 2
  DISTINCT_PC = 3
  MERGE_PC = 4
  DISTINCT_PCSA = 5
  MERGE_PCSA = 6
  MIN = 7
  SUM = 8

  _VALUES_TO_NAMES = {
    0: "INVALID",
    1: "COUNT",
    2: "MAX",
    3: "DISTINCT_PC",
    4: "MERGE_PC",
    5: "DISTINCT_PCSA",
    6: "MERGE_PCSA",
    7: "MIN",
    8: "SUM",
  }

  _NAMES_TO_VALUES = {
    "INVALID": 0,
    "COUNT": 1,
    "MAX": 2,
    "DISTINCT_PC": 3,
    "MERGE_PC": 4,
    "DISTINCT_PCSA": 5,
    "MERGE_PCSA": 6,
    "MIN": 7,
    "SUM": 8,
  }


class TAggregateExpr:
  """
  Attributes:
   - is_star
   - is_distinct
   - op
  """

  thrift_spec = (
    None, # 0
    (1, TType.BOOL, 'is_star', None, None, ), # 1
    (2, TType.BOOL, 'is_distinct', None, None, ), # 2
    (3, TType.I32, 'op', None, None, ), # 3
  )

  def __init__(self, is_star=None, is_distinct=None, op=None,):
    self.is_star = is_star
    self.is_distinct = is_distinct
    self.op = op

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.BOOL:
          self.is_star = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.BOOL:
          self.is_distinct = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.op = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('TAggregateExpr')
    if self.is_star is not None:
      oprot.writeFieldBegin('is_star', TType.BOOL, 1)
      oprot.writeBool(self.is_star)
      oprot.writeFieldEnd()
    if self.is_distinct is not None:
      oprot.writeFieldBegin('is_distinct', TType.BOOL, 2)
      oprot.writeBool(self.is_distinct)
      oprot.writeFieldEnd()
    if self.op is not None:
      oprot.writeFieldBegin('op', TType.I32, 3)
      oprot.writeI32(self.op)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.is_star is None:
      raise TProtocol.TProtocolException(message='Required field is_star is unset!')
    if self.is_distinct is None:
      raise TProtocol.TProtocolException(message='Required field is_distinct is unset!')
    if self.op is None:
      raise TProtocol.TProtocolException(message='Required field op is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class TBoolLiteral:
  """
  Attributes:
   - value
  """

  thrift_spec = (
    None, # 0
    (1, TType.BOOL, 'value', None, None, ), # 1
  )

  def __init__(self, value=None,):
    self.value = value

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.BOOL:
          self.value = iprot.readBool();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('TBoolLiteral')
    if self.value is not None:
      oprot.writeFieldBegin('value', TType.BOOL, 1)
      oprot.writeBool(self.value)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.value is None:
      raise TProtocol.TProtocolException(message='Required field value is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class TCaseExpr:
  """
  Attributes:
   - has_case_expr
   - has_else_expr
  """

  thrift_spec = (
    None, # 0
    (1, TType.BOOL, 'has_case_expr', None, None, ), # 1
    (2, TType.BOOL, 'has_else_expr', None, None, ), # 2
  )

  def __init__(self, has_case_expr=None, has_else_expr=None,):
    self.has_case_expr = has_case_expr
    self.has_else_expr = has_else_expr

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.BOOL:
          self.has_case_expr = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.BOOL:
          self.has_else_expr = iprot.readBool();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('TCaseExpr')
    if self.has_case_expr is not None:
      oprot.writeFieldBegin('has_case_expr', TType.BOOL, 1)
      oprot.writeBool(self.has_case_expr)
      oprot.writeFieldEnd()
    if self.has_else_expr is not None:
      oprot.writeFieldBegin('has_else_expr', TType.BOOL, 2)
      oprot.writeBool(self.has_else_expr)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.has_case_expr is None:
      raise TProtocol.TProtocolException(message='Required field has_case_expr is unset!')
    if self.has_else_expr is None:
      raise TProtocol.TProtocolException(message='Required field has_else_expr is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class TDateLiteral:
  """
  Attributes:
   - value
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'value', None, None, ), # 1
  )

  def __init__(self, value=None,):
    self.value = value

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.value = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('TDateLiteral')
    if self.value is not None:
      oprot.writeFieldBegin('value', TType.I64, 1)
      oprot.writeI64(self.value)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.value is None:
      raise TProtocol.TProtocolException(message='Required field value is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class TFloatLiteral:
  """
  Attributes:
   - value
  """

  thrift_spec = (
    None, # 0
    (1, TType.DOUBLE, 'value', None, None, ), # 1
  )

  def __init__(self, value=None,):
    self.value = value

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.DOUBLE:
          self.value = iprot.readDouble();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('TFloatLiteral')
    if self.value is not None:
      oprot.writeFieldBegin('value', TType.DOUBLE, 1)
      oprot.writeDouble(self.value)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.value is None:
      raise TProtocol.TProtocolException(message='Required field value is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class TIntLiteral:
  """
  Attributes:
   - value
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'value', None, None, ), # 1
  )

  def __init__(self, value=None,):
    self.value = value

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.value = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('TIntLiteral')
    if self.value is not None:
      oprot.writeFieldBegin('value', TType.I64, 1)
      oprot.writeI64(self.value)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.value is None:
      raise TProtocol.TProtocolException(message='Required field value is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class TInPredicate:
  """
  Attributes:
   - is_not_in
  """

  thrift_spec = (
    None, # 0
    (1, TType.BOOL, 'is_not_in', None, None, ), # 1
  )

  def __init__(self, is_not_in=None,):
    self.is_not_in = is_not_in

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.BOOL:
          self.is_not_in = iprot.readBool();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('TInPredicate')
    if self.is_not_in is not None:
      oprot.writeFieldBegin('is_not_in', TType.BOOL, 1)
      oprot.writeBool(self.is_not_in)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.is_not_in is None:
      raise TProtocol.TProtocolException(message='Required field is_not_in is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class TIsNullPredicate:
  """
  Attributes:
   - is_not_null
  """

  thrift_spec = (
    None, # 0
    (1, TType.BOOL, 'is_not_null', None, None, ), # 1
  )

  def __init__(self, is_not_null=None,):
    self.is_not_null = is_not_null

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.BOOL:
          self.is_not_null = iprot.readBool();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('TIsNullPredicate')
    if self.is_not_null is not None:
      oprot.writeFieldBegin('is_not_null', TType.BOOL, 1)
      oprot.writeBool(self.is_not_null)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.is_not_null is None:
      raise TProtocol.TProtocolException(message='Required field is_not_null is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class TLikePredicate:
  """
  Attributes:
   - escape_char
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'escape_char', None, None, ), # 1
  )

  def __init__(self, escape_char=None,):
    self.escape_char = escape_char

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.escape_char = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('TLikePredicate')
    if self.escape_char is not None:
      oprot.writeFieldBegin('escape_char', TType.STRING, 1)
      oprot.writeString(self.escape_char)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.escape_char is None:
      raise TProtocol.TProtocolException(message='Required field escape_char is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class TLiteralPredicate:
  """
  Attributes:
   - value
   - is_null
  """

  thrift_spec = (
    None, # 0
    (1, TType.BOOL, 'value', None, None, ), # 1
    (2, TType.BOOL, 'is_null', None, None, ), # 2
  )

  def __init__(self, value=None, is_null=None,):
    self.value = value
    self.is_null = is_null

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.BOOL:
          self.value = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.BOOL:
          self.is_null = iprot.readBool();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('TLiteralPredicate')
    if self.value is not None:
      oprot.writeFieldBegin('value', TType.BOOL, 1)
      oprot.writeBool(self.value)
      oprot.writeFieldEnd()
    if self.is_null is not None:
      oprot.writeFieldBegin('is_null', TType.BOOL, 2)
      oprot.writeBool(self.is_null)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.value is None:
      raise TProtocol.TProtocolException(message='Required field value is unset!')
    if self.is_null is None:
      raise TProtocol.TProtocolException(message='Required field is_null is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class TSlotRef:
  """
  Attributes:
   - slot_id
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'slot_id', None, None, ), # 1
  )

  def __init__(self, slot_id=None,):
    self.slot_id = slot_id

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.slot_id = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('TSlotRef')
    if self.slot_id is not None:
      oprot.writeFieldBegin('slot_id', TType.I32, 1)
      oprot.writeI32(self.slot_id)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.slot_id is None:
      raise TProtocol.TProtocolException(message='Required field slot_id is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class TStringLiteral:
  """
  Attributes:
   - value
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'value', None, None, ), # 1
  )

  def __init__(self, value=None,):
    self.value = value

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.value = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('TStringLiteral')
    if self.value is not None:
      oprot.writeFieldBegin('value', TType.STRING, 1)
      oprot.writeString(self.value)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.value is None:
      raise TProtocol.TProtocolException(message='Required field value is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class TExprNode:
  """
  Attributes:
   - node_type
   - type
   - opcode
   - num_children
   - agg_expr
   - bool_literal
   - case_expr
   - date_literal
   - float_literal
   - int_literal
   - in_predicate
   - is_null_pred
   - like_pred
   - literal_pred
   - slot_ref
   - string_literal
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'node_type', None, None, ), # 1
    (2, TType.I32, 'type', None, None, ), # 2
    (3, TType.I32, 'opcode', None, None, ), # 3
    (4, TType.I32, 'num_children', None, None, ), # 4
    (5, TType.STRUCT, 'agg_expr', (TAggregateExpr, TAggregateExpr.thrift_spec), None, ), # 5
    (6, TType.STRUCT, 'bool_literal', (TBoolLiteral, TBoolLiteral.thrift_spec), None, ), # 6
    (7, TType.STRUCT, 'case_expr', (TCaseExpr, TCaseExpr.thrift_spec), None, ), # 7
    (8, TType.STRUCT, 'date_literal', (TDateLiteral, TDateLiteral.thrift_spec), None, ), # 8
    (9, TType.STRUCT, 'float_literal', (TFloatLiteral, TFloatLiteral.thrift_spec), None, ), # 9
    (10, TType.STRUCT, 'int_literal', (TIntLiteral, TIntLiteral.thrift_spec), None, ), # 10
    (11, TType.STRUCT, 'in_predicate', (TInPredicate, TInPredicate.thrift_spec), None, ), # 11
    (12, TType.STRUCT, 'is_null_pred', (TIsNullPredicate, TIsNullPredicate.thrift_spec), None, ), # 12
    (13, TType.STRUCT, 'like_pred', (TLikePredicate, TLikePredicate.thrift_spec), None, ), # 13
    (14, TType.STRUCT, 'literal_pred', (TLiteralPredicate, TLiteralPredicate.thrift_spec), None, ), # 14
    (15, TType.STRUCT, 'slot_ref', (TSlotRef, TSlotRef.thrift_spec), None, ), # 15
    (16, TType.STRUCT, 'string_literal', (TStringLiteral, TStringLiteral.thrift_spec), None, ), # 16
  )

  def __init__(self, node_type=None, type=None, opcode=None, num_children=None, agg_expr=None, bool_literal=None, case_expr=None, date_literal=None, float_literal=None, int_literal=None, in_predicate=None, is_null_pred=None, like_pred=None, literal_pred=None, slot_ref=None, string_literal=None,):
    self.node_type = node_type
    self.type = type
    self.opcode = opcode
    self.num_children = num_children
    self.agg_expr = agg_expr
    self.bool_literal = bool_literal
    self.case_expr = case_expr
    self.date_literal = date_literal
    self.float_literal = float_literal
    self.int_literal = int_literal
    self.in_predicate = in_predicate
    self.is_null_pred = is_null_pred
    self.like_pred = like_pred
    self.literal_pred = literal_pred
    self.slot_ref = slot_ref
    self.string_literal = string_literal

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.node_type = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.type = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.opcode = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.num_children = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRUCT:
          self.agg_expr = TAggregateExpr()
          self.agg_expr.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRUCT:
          self.bool_literal = TBoolLiteral()
          self.bool_literal.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRUCT:
          self.case_expr = TCaseExpr()
          self.case_expr.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRUCT:
          self.date_literal = TDateLiteral()
          self.date_literal.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.STRUCT:
          self.float_literal = TFloatLiteral()
          self.float_literal.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.STRUCT:
          self.int_literal = TIntLiteral()
          self.int_literal.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.STRUCT:
          self.in_predicate = TInPredicate()
          self.in_predicate.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.STRUCT:
          self.is_null_pred = TIsNullPredicate()
          self.is_null_pred.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.STRUCT:
          self.like_pred = TLikePredicate()
          self.like_pred.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 14:
        if ftype == TType.STRUCT:
          self.literal_pred = TLiteralPredicate()
          self.literal_pred.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 15:
        if ftype == TType.STRUCT:
          self.slot_ref = TSlotRef()
          self.slot_ref.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 16:
        if ftype == TType.STRUCT:
          self.string_literal = TStringLiteral()
          self.string_literal.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('TExprNode')
    if self.node_type is not None:
      oprot.writeFieldBegin('node_type', TType.I32, 1)
      oprot.writeI32(self.node_type)
      oprot.writeFieldEnd()
    if self.type is not None:
      oprot.writeFieldBegin('type', TType.I32, 2)
      oprot.writeI32(self.type)
      oprot.writeFieldEnd()
    if self.opcode is not None:
      oprot.writeFieldBegin('opcode', TType.I32, 3)
      oprot.writeI32(self.opcode)
      oprot.writeFieldEnd()
    if self.num_children is not None:
      oprot.writeFieldBegin('num_children', TType.I32, 4)
      oprot.writeI32(self.num_children)
      oprot.writeFieldEnd()
    if self.agg_expr is not None:
      oprot.writeFieldBegin('agg_expr', TType.STRUCT, 5)
      self.agg_expr.write(oprot)
      oprot.writeFieldEnd()
    if self.bool_literal is not None:
      oprot.writeFieldBegin('bool_literal', TType.STRUCT, 6)
      self.bool_literal.write(oprot)
      oprot.writeFieldEnd()
    if self.case_expr is not None:
      oprot.writeFieldBegin('case_expr', TType.STRUCT, 7)
      self.case_expr.write(oprot)
      oprot.writeFieldEnd()
    if self.date_literal is not None:
      oprot.writeFieldBegin('date_literal', TType.STRUCT, 8)
      self.date_literal.write(oprot)
      oprot.writeFieldEnd()
    if self.float_literal is not None:
      oprot.writeFieldBegin('float_literal', TType.STRUCT, 9)
      self.float_literal.write(oprot)
      oprot.writeFieldEnd()
    if self.int_literal is not None:
      oprot.writeFieldBegin('int_literal', TType.STRUCT, 10)
      self.int_literal.write(oprot)
      oprot.writeFieldEnd()
    if self.in_predicate is not None:
      oprot.writeFieldBegin('in_predicate', TType.STRUCT, 11)
      self.in_predicate.write(oprot)
      oprot.writeFieldEnd()
    if self.is_null_pred is not None:
      oprot.writeFieldBegin('is_null_pred', TType.STRUCT, 12)
      self.is_null_pred.write(oprot)
      oprot.writeFieldEnd()
    if self.like_pred is not None:
      oprot.writeFieldBegin('like_pred', TType.STRUCT, 13)
      self.like_pred.write(oprot)
      oprot.writeFieldEnd()
    if self.literal_pred is not None:
      oprot.writeFieldBegin('literal_pred', TType.STRUCT, 14)
      self.literal_pred.write(oprot)
      oprot.writeFieldEnd()
    if self.slot_ref is not None:
      oprot.writeFieldBegin('slot_ref', TType.STRUCT, 15)
      self.slot_ref.write(oprot)
      oprot.writeFieldEnd()
    if self.string_literal is not None:
      oprot.writeFieldBegin('string_literal', TType.STRUCT, 16)
      self.string_literal.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.node_type is None:
      raise TProtocol.TProtocolException(message='Required field node_type is unset!')
    if self.type is None:
      raise TProtocol.TProtocolException(message='Required field type is unset!')
    if self.num_children is None:
      raise TProtocol.TProtocolException(message='Required field num_children is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class TExpr:
  """
  Attributes:
   - nodes
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'nodes', (TType.STRUCT,(TExprNode, TExprNode.thrift_spec)), None, ), # 1
  )

  def __init__(self, nodes=None,):
    self.nodes = nodes

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.nodes = []
          (_etype3, _size0) = iprot.readListBegin()
          for _i4 in xrange(_size0):
            _elem5 = TExprNode()
            _elem5.read(iprot)
            self.nodes.append(_elem5)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('TExpr')
    if self.nodes is not None:
      oprot.writeFieldBegin('nodes', TType.LIST, 1)
      oprot.writeListBegin(TType.STRUCT, len(self.nodes))
      for iter6 in self.nodes:
        iter6.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.nodes is None:
      raise TProtocol.TProtocolException(message='Required field nodes is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
