#
# Autogenerated by Thrift Compiler (0.9.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException
import Types.ttypes
import Exprs.ttypes


from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None


class TTableType:
  HDFS_TABLE = 0
  HBASE_TABLE = 1

  _VALUES_TO_NAMES = {
    0: "HDFS_TABLE",
    1: "HBASE_TABLE",
  }

  _NAMES_TO_VALUES = {
    "HDFS_TABLE": 0,
    "HBASE_TABLE": 1,
  }

class THdfsFileFormat:
  TEXT = 0
  LZO_TEXT = 1
  RC_FILE = 2
  SEQUENCE_FILE = 3
  AVRO = 4
  PARQUET = 5

  _VALUES_TO_NAMES = {
    0: "TEXT",
    1: "LZO_TEXT",
    2: "RC_FILE",
    3: "SEQUENCE_FILE",
    4: "AVRO",
    5: "PARQUET",
  }

  _NAMES_TO_VALUES = {
    "TEXT": 0,
    "LZO_TEXT": 1,
    "RC_FILE": 2,
    "SEQUENCE_FILE": 3,
    "AVRO": 4,
    "PARQUET": 5,
  }

class THdfsCompression:
  NONE = 0
  DEFAULT = 1
  GZIP = 2
  DEFLATE = 3
  BZIP2 = 4
  SNAPPY = 5
  SNAPPY_BLOCKED = 6

  _VALUES_TO_NAMES = {
    0: "NONE",
    1: "DEFAULT",
    2: "GZIP",
    3: "DEFLATE",
    4: "BZIP2",
    5: "SNAPPY",
    6: "SNAPPY_BLOCKED",
  }

  _NAMES_TO_VALUES = {
    "NONE": 0,
    "DEFAULT": 1,
    "GZIP": 2,
    "DEFLATE": 3,
    "BZIP2": 4,
    "SNAPPY": 5,
    "SNAPPY_BLOCKED": 6,
  }


class TSlotDescriptor:
  """
  Attributes:
   - id
   - parent
   - slotType
   - columnPos
   - byteOffset
   - nullIndicatorByte
   - nullIndicatorBit
   - slotIdx
   - isMaterialized
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'id', None, None, ), # 1
    (2, TType.I32, 'parent', None, None, ), # 2
    (3, TType.I32, 'slotType', None, None, ), # 3
    (4, TType.I32, 'columnPos', None, None, ), # 4
    (5, TType.I32, 'byteOffset', None, None, ), # 5
    (6, TType.I32, 'nullIndicatorByte', None, None, ), # 6
    (7, TType.I32, 'nullIndicatorBit', None, None, ), # 7
    None, # 8
    (9, TType.I32, 'slotIdx', None, None, ), # 9
    (10, TType.BOOL, 'isMaterialized', None, None, ), # 10
  )

  def __init__(self, id=None, parent=None, slotType=None, columnPos=None, byteOffset=None, nullIndicatorByte=None, nullIndicatorBit=None, slotIdx=None, isMaterialized=None,):
    self.id = id
    self.parent = parent
    self.slotType = slotType
    self.columnPos = columnPos
    self.byteOffset = byteOffset
    self.nullIndicatorByte = nullIndicatorByte
    self.nullIndicatorBit = nullIndicatorBit
    self.slotIdx = slotIdx
    self.isMaterialized = isMaterialized

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.id = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.parent = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.slotType = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.columnPos = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.byteOffset = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.nullIndicatorByte = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I32:
          self.nullIndicatorBit = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.I32:
          self.slotIdx = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.BOOL:
          self.isMaterialized = iprot.readBool();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('TSlotDescriptor')
    if self.id is not None:
      oprot.writeFieldBegin('id', TType.I32, 1)
      oprot.writeI32(self.id)
      oprot.writeFieldEnd()
    if self.parent is not None:
      oprot.writeFieldBegin('parent', TType.I32, 2)
      oprot.writeI32(self.parent)
      oprot.writeFieldEnd()
    if self.slotType is not None:
      oprot.writeFieldBegin('slotType', TType.I32, 3)
      oprot.writeI32(self.slotType)
      oprot.writeFieldEnd()
    if self.columnPos is not None:
      oprot.writeFieldBegin('columnPos', TType.I32, 4)
      oprot.writeI32(self.columnPos)
      oprot.writeFieldEnd()
    if self.byteOffset is not None:
      oprot.writeFieldBegin('byteOffset', TType.I32, 5)
      oprot.writeI32(self.byteOffset)
      oprot.writeFieldEnd()
    if self.nullIndicatorByte is not None:
      oprot.writeFieldBegin('nullIndicatorByte', TType.I32, 6)
      oprot.writeI32(self.nullIndicatorByte)
      oprot.writeFieldEnd()
    if self.nullIndicatorBit is not None:
      oprot.writeFieldBegin('nullIndicatorBit', TType.I32, 7)
      oprot.writeI32(self.nullIndicatorBit)
      oprot.writeFieldEnd()
    if self.slotIdx is not None:
      oprot.writeFieldBegin('slotIdx', TType.I32, 9)
      oprot.writeI32(self.slotIdx)
      oprot.writeFieldEnd()
    if self.isMaterialized is not None:
      oprot.writeFieldBegin('isMaterialized', TType.BOOL, 10)
      oprot.writeBool(self.isMaterialized)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.id is None:
      raise TProtocol.TProtocolException(message='Required field id is unset!')
    if self.parent is None:
      raise TProtocol.TProtocolException(message='Required field parent is unset!')
    if self.slotType is None:
      raise TProtocol.TProtocolException(message='Required field slotType is unset!')
    if self.columnPos is None:
      raise TProtocol.TProtocolException(message='Required field columnPos is unset!')
    if self.byteOffset is None:
      raise TProtocol.TProtocolException(message='Required field byteOffset is unset!')
    if self.nullIndicatorByte is None:
      raise TProtocol.TProtocolException(message='Required field nullIndicatorByte is unset!')
    if self.nullIndicatorBit is None:
      raise TProtocol.TProtocolException(message='Required field nullIndicatorBit is unset!')
    if self.slotIdx is None:
      raise TProtocol.TProtocolException(message='Required field slotIdx is unset!')
    if self.isMaterialized is None:
      raise TProtocol.TProtocolException(message='Required field isMaterialized is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class THdfsPartition:
  """
  Attributes:
   - lineDelim
   - fieldDelim
   - collectionDelim
   - mapKeyDelim
   - escapeChar
   - fileFormat
   - partitionKeyExprs
   - blockSize
   - compression
  """

  thrift_spec = (
    None, # 0
    (1, TType.BYTE, 'lineDelim', None, None, ), # 1
    (2, TType.BYTE, 'fieldDelim', None, None, ), # 2
    (3, TType.BYTE, 'collectionDelim', None, None, ), # 3
    (4, TType.BYTE, 'mapKeyDelim', None, None, ), # 4
    (5, TType.BYTE, 'escapeChar', None, None, ), # 5
    (6, TType.I32, 'fileFormat', None, None, ), # 6
    (7, TType.LIST, 'partitionKeyExprs', (TType.STRUCT,(Exprs.ttypes.TExpr, Exprs.ttypes.TExpr.thrift_spec)), None, ), # 7
    (8, TType.I32, 'blockSize', None, None, ), # 8
    (9, TType.I32, 'compression', None, None, ), # 9
  )

  def __init__(self, lineDelim=None, fieldDelim=None, collectionDelim=None, mapKeyDelim=None, escapeChar=None, fileFormat=None, partitionKeyExprs=None, blockSize=None, compression=None,):
    self.lineDelim = lineDelim
    self.fieldDelim = fieldDelim
    self.collectionDelim = collectionDelim
    self.mapKeyDelim = mapKeyDelim
    self.escapeChar = escapeChar
    self.fileFormat = fileFormat
    self.partitionKeyExprs = partitionKeyExprs
    self.blockSize = blockSize
    self.compression = compression

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.BYTE:
          self.lineDelim = iprot.readByte();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.BYTE:
          self.fieldDelim = iprot.readByte();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.BYTE:
          self.collectionDelim = iprot.readByte();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.BYTE:
          self.mapKeyDelim = iprot.readByte();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.BYTE:
          self.escapeChar = iprot.readByte();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.fileFormat = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.LIST:
          self.partitionKeyExprs = []
          (_etype3, _size0) = iprot.readListBegin()
          for _i4 in xrange(_size0):
            _elem5 = Exprs.ttypes.TExpr()
            _elem5.read(iprot)
            self.partitionKeyExprs.append(_elem5)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.I32:
          self.blockSize = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.I32:
          self.compression = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('THdfsPartition')
    if self.lineDelim is not None:
      oprot.writeFieldBegin('lineDelim', TType.BYTE, 1)
      oprot.writeByte(self.lineDelim)
      oprot.writeFieldEnd()
    if self.fieldDelim is not None:
      oprot.writeFieldBegin('fieldDelim', TType.BYTE, 2)
      oprot.writeByte(self.fieldDelim)
      oprot.writeFieldEnd()
    if self.collectionDelim is not None:
      oprot.writeFieldBegin('collectionDelim', TType.BYTE, 3)
      oprot.writeByte(self.collectionDelim)
      oprot.writeFieldEnd()
    if self.mapKeyDelim is not None:
      oprot.writeFieldBegin('mapKeyDelim', TType.BYTE, 4)
      oprot.writeByte(self.mapKeyDelim)
      oprot.writeFieldEnd()
    if self.escapeChar is not None:
      oprot.writeFieldBegin('escapeChar', TType.BYTE, 5)
      oprot.writeByte(self.escapeChar)
      oprot.writeFieldEnd()
    if self.fileFormat is not None:
      oprot.writeFieldBegin('fileFormat', TType.I32, 6)
      oprot.writeI32(self.fileFormat)
      oprot.writeFieldEnd()
    if self.partitionKeyExprs is not None:
      oprot.writeFieldBegin('partitionKeyExprs', TType.LIST, 7)
      oprot.writeListBegin(TType.STRUCT, len(self.partitionKeyExprs))
      for iter6 in self.partitionKeyExprs:
        iter6.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.blockSize is not None:
      oprot.writeFieldBegin('blockSize', TType.I32, 8)
      oprot.writeI32(self.blockSize)
      oprot.writeFieldEnd()
    if self.compression is not None:
      oprot.writeFieldBegin('compression', TType.I32, 9)
      oprot.writeI32(self.compression)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.lineDelim is None:
      raise TProtocol.TProtocolException(message='Required field lineDelim is unset!')
    if self.fieldDelim is None:
      raise TProtocol.TProtocolException(message='Required field fieldDelim is unset!')
    if self.collectionDelim is None:
      raise TProtocol.TProtocolException(message='Required field collectionDelim is unset!')
    if self.mapKeyDelim is None:
      raise TProtocol.TProtocolException(message='Required field mapKeyDelim is unset!')
    if self.escapeChar is None:
      raise TProtocol.TProtocolException(message='Required field escapeChar is unset!')
    if self.fileFormat is None:
      raise TProtocol.TProtocolException(message='Required field fileFormat is unset!')
    if self.blockSize is None:
      raise TProtocol.TProtocolException(message='Required field blockSize is unset!')
    if self.compression is None:
      raise TProtocol.TProtocolException(message='Required field compression is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class THdfsTable:
  """
  Attributes:
   - hdfsBaseDir
   - colNames
   - nullPartitionKeyValue
   - partitions
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'hdfsBaseDir', None, None, ), # 1
    (2, TType.LIST, 'colNames', (TType.STRING,None), None, ), # 2
    (3, TType.STRING, 'nullPartitionKeyValue', None, None, ), # 3
    (4, TType.MAP, 'partitions', (TType.I64,None,TType.STRUCT,(THdfsPartition, THdfsPartition.thrift_spec)), None, ), # 4
  )

  def __init__(self, hdfsBaseDir=None, colNames=None, nullPartitionKeyValue=None, partitions=None,):
    self.hdfsBaseDir = hdfsBaseDir
    self.colNames = colNames
    self.nullPartitionKeyValue = nullPartitionKeyValue
    self.partitions = partitions

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.hdfsBaseDir = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.colNames = []
          (_etype10, _size7) = iprot.readListBegin()
          for _i11 in xrange(_size7):
            _elem12 = iprot.readString();
            self.colNames.append(_elem12)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.nullPartitionKeyValue = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.MAP:
          self.partitions = {}
          (_ktype14, _vtype15, _size13 ) = iprot.readMapBegin() 
          for _i17 in xrange(_size13):
            _key18 = iprot.readI64();
            _val19 = THdfsPartition()
            _val19.read(iprot)
            self.partitions[_key18] = _val19
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('THdfsTable')
    if self.hdfsBaseDir is not None:
      oprot.writeFieldBegin('hdfsBaseDir', TType.STRING, 1)
      oprot.writeString(self.hdfsBaseDir)
      oprot.writeFieldEnd()
    if self.colNames is not None:
      oprot.writeFieldBegin('colNames', TType.LIST, 2)
      oprot.writeListBegin(TType.STRING, len(self.colNames))
      for iter20 in self.colNames:
        oprot.writeString(iter20)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.nullPartitionKeyValue is not None:
      oprot.writeFieldBegin('nullPartitionKeyValue', TType.STRING, 3)
      oprot.writeString(self.nullPartitionKeyValue)
      oprot.writeFieldEnd()
    if self.partitions is not None:
      oprot.writeFieldBegin('partitions', TType.MAP, 4)
      oprot.writeMapBegin(TType.I64, TType.STRUCT, len(self.partitions))
      for kiter21,viter22 in self.partitions.items():
        oprot.writeI64(kiter21)
        viter22.write(oprot)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.hdfsBaseDir is None:
      raise TProtocol.TProtocolException(message='Required field hdfsBaseDir is unset!')
    if self.colNames is None:
      raise TProtocol.TProtocolException(message='Required field colNames is unset!')
    if self.nullPartitionKeyValue is None:
      raise TProtocol.TProtocolException(message='Required field nullPartitionKeyValue is unset!')
    if self.partitions is None:
      raise TProtocol.TProtocolException(message='Required field partitions is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class THBaseTable:
  """
  Attributes:
   - tableName
   - families
   - qualifiers
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'tableName', None, None, ), # 1
    (2, TType.LIST, 'families', (TType.STRING,None), None, ), # 2
    (3, TType.LIST, 'qualifiers', (TType.STRING,None), None, ), # 3
  )

  def __init__(self, tableName=None, families=None, qualifiers=None,):
    self.tableName = tableName
    self.families = families
    self.qualifiers = qualifiers

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.tableName = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.families = []
          (_etype26, _size23) = iprot.readListBegin()
          for _i27 in xrange(_size23):
            _elem28 = iprot.readString();
            self.families.append(_elem28)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.LIST:
          self.qualifiers = []
          (_etype32, _size29) = iprot.readListBegin()
          for _i33 in xrange(_size29):
            _elem34 = iprot.readString();
            self.qualifiers.append(_elem34)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('THBaseTable')
    if self.tableName is not None:
      oprot.writeFieldBegin('tableName', TType.STRING, 1)
      oprot.writeString(self.tableName)
      oprot.writeFieldEnd()
    if self.families is not None:
      oprot.writeFieldBegin('families', TType.LIST, 2)
      oprot.writeListBegin(TType.STRING, len(self.families))
      for iter35 in self.families:
        oprot.writeString(iter35)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.qualifiers is not None:
      oprot.writeFieldBegin('qualifiers', TType.LIST, 3)
      oprot.writeListBegin(TType.STRING, len(self.qualifiers))
      for iter36 in self.qualifiers:
        oprot.writeString(iter36)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.tableName is None:
      raise TProtocol.TProtocolException(message='Required field tableName is unset!')
    if self.families is None:
      raise TProtocol.TProtocolException(message='Required field families is unset!')
    if self.qualifiers is None:
      raise TProtocol.TProtocolException(message='Required field qualifiers is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class TTableDescriptor:
  """
  Attributes:
   - id
   - tableType
   - numCols
   - numClusteringCols
   - hdfsTable
   - hbaseTable
   - tableName
   - dbName
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'id', None, None, ), # 1
    (2, TType.I32, 'tableType', None, None, ), # 2
    (3, TType.I32, 'numCols', None, None, ), # 3
    (4, TType.I32, 'numClusteringCols', None, None, ), # 4
    (5, TType.STRUCT, 'hdfsTable', (THdfsTable, THdfsTable.thrift_spec), None, ), # 5
    (6, TType.STRUCT, 'hbaseTable', (THBaseTable, THBaseTable.thrift_spec), None, ), # 6
    (7, TType.STRING, 'tableName', None, None, ), # 7
    (8, TType.STRING, 'dbName', None, None, ), # 8
  )

  def __init__(self, id=None, tableType=None, numCols=None, numClusteringCols=None, hdfsTable=None, hbaseTable=None, tableName=None, dbName=None,):
    self.id = id
    self.tableType = tableType
    self.numCols = numCols
    self.numClusteringCols = numClusteringCols
    self.hdfsTable = hdfsTable
    self.hbaseTable = hbaseTable
    self.tableName = tableName
    self.dbName = dbName

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.id = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.tableType = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.numCols = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.numClusteringCols = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRUCT:
          self.hdfsTable = THdfsTable()
          self.hdfsTable.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRUCT:
          self.hbaseTable = THBaseTable()
          self.hbaseTable.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.tableName = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRING:
          self.dbName = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('TTableDescriptor')
    if self.id is not None:
      oprot.writeFieldBegin('id', TType.I32, 1)
      oprot.writeI32(self.id)
      oprot.writeFieldEnd()
    if self.tableType is not None:
      oprot.writeFieldBegin('tableType', TType.I32, 2)
      oprot.writeI32(self.tableType)
      oprot.writeFieldEnd()
    if self.numCols is not None:
      oprot.writeFieldBegin('numCols', TType.I32, 3)
      oprot.writeI32(self.numCols)
      oprot.writeFieldEnd()
    if self.numClusteringCols is not None:
      oprot.writeFieldBegin('numClusteringCols', TType.I32, 4)
      oprot.writeI32(self.numClusteringCols)
      oprot.writeFieldEnd()
    if self.hdfsTable is not None:
      oprot.writeFieldBegin('hdfsTable', TType.STRUCT, 5)
      self.hdfsTable.write(oprot)
      oprot.writeFieldEnd()
    if self.hbaseTable is not None:
      oprot.writeFieldBegin('hbaseTable', TType.STRUCT, 6)
      self.hbaseTable.write(oprot)
      oprot.writeFieldEnd()
    if self.tableName is not None:
      oprot.writeFieldBegin('tableName', TType.STRING, 7)
      oprot.writeString(self.tableName)
      oprot.writeFieldEnd()
    if self.dbName is not None:
      oprot.writeFieldBegin('dbName', TType.STRING, 8)
      oprot.writeString(self.dbName)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.id is None:
      raise TProtocol.TProtocolException(message='Required field id is unset!')
    if self.tableType is None:
      raise TProtocol.TProtocolException(message='Required field tableType is unset!')
    if self.numCols is None:
      raise TProtocol.TProtocolException(message='Required field numCols is unset!')
    if self.numClusteringCols is None:
      raise TProtocol.TProtocolException(message='Required field numClusteringCols is unset!')
    if self.tableName is None:
      raise TProtocol.TProtocolException(message='Required field tableName is unset!')
    if self.dbName is None:
      raise TProtocol.TProtocolException(message='Required field dbName is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class TTupleDescriptor:
  """
  Attributes:
   - id
   - byteSize
   - numNullBytes
   - tableId
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'id', None, None, ), # 1
    (2, TType.I32, 'byteSize', None, None, ), # 2
    (3, TType.I32, 'numNullBytes', None, None, ), # 3
    (4, TType.I32, 'tableId', None, None, ), # 4
  )

  def __init__(self, id=None, byteSize=None, numNullBytes=None, tableId=None,):
    self.id = id
    self.byteSize = byteSize
    self.numNullBytes = numNullBytes
    self.tableId = tableId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.id = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.byteSize = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.numNullBytes = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.tableId = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('TTupleDescriptor')
    if self.id is not None:
      oprot.writeFieldBegin('id', TType.I32, 1)
      oprot.writeI32(self.id)
      oprot.writeFieldEnd()
    if self.byteSize is not None:
      oprot.writeFieldBegin('byteSize', TType.I32, 2)
      oprot.writeI32(self.byteSize)
      oprot.writeFieldEnd()
    if self.numNullBytes is not None:
      oprot.writeFieldBegin('numNullBytes', TType.I32, 3)
      oprot.writeI32(self.numNullBytes)
      oprot.writeFieldEnd()
    if self.tableId is not None:
      oprot.writeFieldBegin('tableId', TType.I32, 4)
      oprot.writeI32(self.tableId)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.id is None:
      raise TProtocol.TProtocolException(message='Required field id is unset!')
    if self.byteSize is None:
      raise TProtocol.TProtocolException(message='Required field byteSize is unset!')
    if self.numNullBytes is None:
      raise TProtocol.TProtocolException(message='Required field numNullBytes is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class TDescriptorTable:
  """
  Attributes:
   - slotDescriptors
   - tupleDescriptors
   - tableDescriptors
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'slotDescriptors', (TType.STRUCT,(TSlotDescriptor, TSlotDescriptor.thrift_spec)), None, ), # 1
    (2, TType.LIST, 'tupleDescriptors', (TType.STRUCT,(TTupleDescriptor, TTupleDescriptor.thrift_spec)), None, ), # 2
    (3, TType.LIST, 'tableDescriptors', (TType.STRUCT,(TTableDescriptor, TTableDescriptor.thrift_spec)), None, ), # 3
  )

  def __init__(self, slotDescriptors=None, tupleDescriptors=None, tableDescriptors=None,):
    self.slotDescriptors = slotDescriptors
    self.tupleDescriptors = tupleDescriptors
    self.tableDescriptors = tableDescriptors

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.slotDescriptors = []
          (_etype40, _size37) = iprot.readListBegin()
          for _i41 in xrange(_size37):
            _elem42 = TSlotDescriptor()
            _elem42.read(iprot)
            self.slotDescriptors.append(_elem42)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.tupleDescriptors = []
          (_etype46, _size43) = iprot.readListBegin()
          for _i47 in xrange(_size43):
            _elem48 = TTupleDescriptor()
            _elem48.read(iprot)
            self.tupleDescriptors.append(_elem48)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.LIST:
          self.tableDescriptors = []
          (_etype52, _size49) = iprot.readListBegin()
          for _i53 in xrange(_size49):
            _elem54 = TTableDescriptor()
            _elem54.read(iprot)
            self.tableDescriptors.append(_elem54)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('TDescriptorTable')
    if self.slotDescriptors is not None:
      oprot.writeFieldBegin('slotDescriptors', TType.LIST, 1)
      oprot.writeListBegin(TType.STRUCT, len(self.slotDescriptors))
      for iter55 in self.slotDescriptors:
        iter55.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.tupleDescriptors is not None:
      oprot.writeFieldBegin('tupleDescriptors', TType.LIST, 2)
      oprot.writeListBegin(TType.STRUCT, len(self.tupleDescriptors))
      for iter56 in self.tupleDescriptors:
        iter56.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.tableDescriptors is not None:
      oprot.writeFieldBegin('tableDescriptors', TType.LIST, 3)
      oprot.writeListBegin(TType.STRUCT, len(self.tableDescriptors))
      for iter57 in self.tableDescriptors:
        iter57.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.tupleDescriptors is None:
      raise TProtocol.TProtocolException(message='Required field tupleDescriptors is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
